<?xml version="1.0" encoding="UTF-8"?>
<package name="AOs" stereotype="0x02">
 <class name="TLtraffic" superclass="qpc::QActive">
  <attribute name="identity" type="eTLidentity_t" visibility="0x02" properties="0x00"/>
  <attribute name="light" type="eTLlight_t" visibility="0x02" properties="0x00"/>
  <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
  <attribute name="toGreen1" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toGreen2" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toYellow" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toRed" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toEmergency" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toInitEmergency" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toInit" type="uint32_t" visibility="0x00" properties="0x00"/>
  <operation name="setLight" type="void" visibility="0x02" properties="0x00">
   <parameter name="light" type="eTLlight_t"/>
   <code>me-&gt;light = light;
BSP_setlight(me-&gt;identity, me-&gt;light);</code>
  </operation>
  <statechart properties="QS_FUN_DICT">
   <initial target="../1">
    <action>QActive_subscribe((QActive *)me, PL_IS_RED_SIG);
QActive_subscribe((QActive *)me, STARTNEWCYCLE_SIG);
QActive_subscribe((QActive *)me, PEDREQUEST_SIG);
QActive_subscribe((QActive *)me, EMERGENCY_SIG);
QActive_subscribe((QActive *)me, EM_RELEASE_SIG);

QS_FUN_DICTIONARY(&amp;TLtraffic_initial);</action>
    <initial_glyph conn="30,4,5,0,32,6">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <state name="RUN">
    <initial target="../3">
     <action>startTimeout(me-&gt;toInit); // was 10sec</action>
     <initial_glyph conn="16,24,4,0,10">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <tran trig="EMERGENCY" target="../6">
     <tran_glyph conn="16,96,2,2,-16">
      <action box="0,-2,10,2"/>
     </tran_glyph>
    </tran>
    <state name="RED">
     <entry>TLtraffic_setLight(me, RED);</entry>
     <initial target="../1">
      <action>sendMessage(TL_IS_RED_SIG);</action>
      <initial_glyph conn="60,20,4,3,8,5">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="RED_1">
      <tran trig="PEDREQUEST" target="../../2">
       <action>sendMessage(TL_IS_RED_SIG);</action>
       <tran_glyph conn="83,24,1,3,15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="STARTNEWCYCLE" target="../../3">
       <tran_glyph conn="75,32,2,0,4">
        <action box="1,1,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="65,18,18,14"/>
     </state>
     <state name="RED_2">
      <tran trig="PL_IS_RED" target="../../1">
       <tran_glyph conn="98,28,3,1,-15">
        <action box="-9,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="STARTNEWCYCLE" target="../../4">
       <tran_glyph conn="108,32,2,0,4">
        <action box="0,1,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="98,18,18,14"/>
     </state>
     <state name="RED_3">
      <entry>startTimeout(me-&gt;toRed);</entry>
      <tran trig="TIMEOUT" target="../../../4">
       <tran_glyph conn="73,50,2,0,10">
        <action box="-3,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PEDREQUEST" target="../../4">
       <action>sendMessage(TL_IS_RED_SIG);</action>
       <tran_glyph conn="83,46,1,3,15">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="65,36,18,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_4">
      <tran trig="PL_IS_RED" target="../../3">
       <tran_glyph conn="98,40,3,1,-15">
        <action box="-9,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="98,36,18,14"/>
     </state>
     <state_glyph node="58,14,62,40">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="INIT_TL">
     <entry>TLtraffic_setLight(me, RED);</entry>
     <tran trig="TIMEOUT">
      <choice target="../../../2">
       <guard>else</guard>
       <choice_glyph conn="38,40,5,3,20">
        <action box="2,-2,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../4">
       <guard>( 0 ==TL_ID(me) )</guard>
       <choice_glyph conn="38,40,4,3,35,6">
        <action box="1,9,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="26,40,1,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,34,20,14">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="GREEN">
     <entry>sendMessage(GLOBAL_START_SIG);
TLtraffic_setLight(me, GREEN);</entry>
     <initial target="../2">
      <initial_glyph conn="47,66,4,3,5,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="TIMEOUT,PEDREQUEST" target="../../5">
      <tran_glyph conn="90,83,1,3,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="GREEN_1">
      <entry>startTimeout(me-&gt;toGreen1); // was 10s</entry>
      <tran trig="TIMEOUT" target="../../3">
       <tran_glyph conn="66,70,1,3,5">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PEDREQUEST" target="../../4">
       <tran_glyph conn="57,75,2,0,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="49,65,17,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="GREEN_2">
      <entry>startTimeout(me-&gt;toGreen2); // was 20s</entry>
      <state_glyph node="71,65,16,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="GREEN_3">
      <state_glyph node="49,79,16,10"/>
     </state>
     <state_glyph node="44,60,46,34">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="YELLOW">
     <entry>TLtraffic_setLight(me, YELLOW);
startTimeout(me-&gt;toYellow); // was 5s</entry>
     <initial target="../1">
      <initial_glyph conn="115,92,4,2,-4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="YELLOW_1">
      <tran trig="TIMEOUT" target="../../2">
       <action>sendMessage(STARTNEWCYCLE_SIG);</action>
       <tran_glyph conn="115,80,0,2,-8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="108,80,14,8"/>
     </state>
     <state name="YELLOW_2">
      <tran trig="STARTNEWCYCLE" target="../../../2">
       <tran_glyph conn="114,66,0,2,-12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="108,66,14,6"/>
     </state>
     <state_glyph node="101,60,28,34">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="EMERGENCY">
     <entry>TLtraffic_setLight(me, RED);
startTimeout(me-&gt;toEmergency); // was 10sec</entry>
     <tran trig="TIMEOUT,EM_RELEASE" target="../../3">
      <action>startTimeout(me-&gt;toInitEmergency); // was 10sec</action>
      <tran_glyph conn="16,66,0,2,-18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,66,20,14">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_glyph node="2,10,132,86"/>
   </state>
   <state_diagram size="135,123"/>
  </statechart>
 </class>
 <class name="TLpedestrian" superclass="qpc::QActive">
  <attribute name="light" type="eTLlight_t" visibility="0x02" properties="0x00"/>
  <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
  <attribute name="tlRedCount" type="uint8_t" visibility="0x02" properties="0x00"/>
  <attribute name="ledStatus" type="uint16_t" visibility="0x00" properties="0x00"/>
  <attribute name="toRed" type="uint32_t" visibility="0x00" properties="0x00"/>
  <attribute name="toGreen" type="uint32_t" visibility="0x00" properties="0x00"/>
  <operation name="sendMessage" type="void" visibility="0x02" properties="0x00">
   <parameter name="msg" type="uint16_t"/>
   <code>QEvt *evt = Q_NEW(QEvt, msg);
Q_ASSERT(evt != (void *)0);
QF_PUBLISH(evt, me);</code>
  </operation>
  <operation name="setLight" type="void" visibility="0x02" properties="0x00">
   <parameter name="light" type="eTLlight_t"/>
   <code>me-&gt;light = light;
BSP_setlight(PedestrianLight, me-&gt;light);</code>
  </operation>
  <statechart properties="QS_FUN_DICT">
   <initial target="../1">
    <action>QActive_subscribe((QActive *)me, TL_IS_RED_SIG);
QActive_subscribe((QActive *)me, BUTTON_SIG);
QActive_subscribe((QActive *)me, GLOBAL_START_SIG);
QActive_subscribe((QActive *)me, EMERGENCY_SIG);
QActive_subscribe((QActive *)me, EM_RELEASE_SIG);

QS_FUN_DICTIONARY(&amp;TLpedestrian_initial);</action>
    <initial_glyph conn="16,4,5,0,16,6">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <state name="RUN">
    <initial target="../4">
     <initial_glyph conn="10,20,5,3,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <tran trig="EMERGENCY" target="../4">
     <tran_glyph conn="24,10,0,0,6">
      <action box="0,-2,10,2"/>
     </tran_glyph>
    </tran>
    <state name="GREEN">
     <entry>TLpedestrian_setLight(me, GREEN);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, me-&gt;toGreen); // was 15s</entry>
     <tran trig="TIMEOUT" target="../../3">
      <action>TLpedestrian_sendMessage(me, PL_IS_RED_SIG);</action>
      <tran_glyph conn="39,20,3,0,-3,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="39,16,15,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RED">
     <entry>TLpedestrian_setLight(me, RED);
TLpedestrian_sendMessage(me, OFF_BLINK_SIG);</entry>
     <exit>TLpedestrian_sendMessage(me, STOP_BLINK_SIG);</exit>
     <initial target="../5">
      <initial_glyph conn="18,40,5,3,6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="RED_3">
      <entry>TLpedestrian_sendMessage(me, PEDREQUEST_SIG);</entry>
      <tran trig="TL_IS_RED" target="../../4">
       <tran_glyph conn="46,64,0,2,-6">
        <action box="-5,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="40,64,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_5">
      <entry>QTimeEvt_rearm(&amp;me-&gt;timeEvt, me-&gt;toRed);
me-&gt;tlRedCount = 0;</entry>
      <tran trig="TIMEOUT" target="../../../2">
       <tran_glyph conn="46,36,0,2,-12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="40,36,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_2">
      <exit>TLpedestrian_sendMessage(me, START_BLINK_SIG);</exit>
      <tran trig="BUTTON" target="../../1">
       <tran_glyph conn="36,54,1,3,2,13,2">
        <action box="-1,5,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="24,50,12,8">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_4">
      <tran trig="TL_IS_RED" target="../../2">
       <tran_glyph conn="46,50,0,2,-6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="40,50,12,8"/>
     </state>
     <state name="RED_1">
      <tran trig="GLOBAL_START" target="../../3">
       <tran_glyph conn="30,44,2,0,6">
        <action box="-4,2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTON" target="../../6">
       <action>TLpedestrian_sendMessage(me, START_BLINK_SIG);</action>
       <tran_glyph conn="24,42,3,3,-4,26,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="24,36,12,8"/>
     </state>
     <state name="RED_6">
      <entry>TLpedestrian_sendMessage(me, START_BLINK_SIG);</entry>
      <tran trig="GLOBAL_START" target="../../1">
       <tran_glyph conn="36,70,1,3,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="24,64,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="16,32,38,45">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="INIT_WAIT">
     <entry>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
TLpedestrian_setLight(me, RED);</entry>
     <tran trig="GLOBAL_START" target="../../3">
      <tran_glyph conn="24,24,2,0,8">
       <action box="-12,1,12,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="16,16,16,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_glyph node="8,10,50,70"/>
   </state>
   <state_diagram size="108,85"/>
  </statechart>
 </class>
 <class name="TLblinker" superclass="qpc::QActive">
  <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
  <operation name="setLed" type="void" visibility="0x00" properties="0x00">
   <parameter name="ledStatus" type="uint16_t"/>
   <code>Q_ASSERT((ledStatus == ledON) || (ledStatus == ledOFF));
BSP_setPedLed(ledStatus);</code>
  </operation>
  <statechart properties="QS_FUN_DICT">
   <initial target="../1">
    <action>QActive_subscribe((QActive *)me, START_BLINK_SIG);
QActive_subscribe((QActive *)me, STOP_BLINK_SIG);
QActive_subscribe((QActive *)me, OFF_BLINK_SIG);
QActive_subscribe((QActive *)me, GLOBAL_START_SIG);
QActive_subscribe((QActive *)me, EMERGENCY_SIG);

QS_FUN_DICTIONARY(&amp;TLblinker_initial);</action>
    <initial_glyph conn="34,4,4,0,7">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <state name="RUN">
    <initial target="../2">
     <initial_glyph conn="28,18,5,1,-6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <tran trig="EMERGENCY" target="../2">
     <tran_glyph conn="42,11,0,1,9,-20">
      <action box="-11,7,10,2"/>
     </tran_glyph>
    </tran>
    <state name="INIT">
     <entry>setLEDoff();</entry>
     <tran trig="GLOBAL_START" target="../../3">
      <tran_glyph conn="16,23,2,0,6">
       <action box="-4,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="10,15,12,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="INACTIVE">
     <entry>setLEDon();</entry>
     <tran trig="START_BLINK" target="../../4">
      <tran_glyph conn="16,37,2,0,6">
       <action box="-4,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="10,29,12,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="ACTIVE">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, T_250ms, T_250ms);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <initial target="../2">
      <initial_glyph conn="12,47,4,3,6,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="STOP_BLINK" target="../../5">
      <tran_glyph conn="48,43,0,2,-6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="OFF">
      <entry>setLEDoff();</entry>
      <tran trig="TIMEOUT" target="../../3">
       <tran_glyph conn="22,49,0,0,-2,22,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="14,49,14,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="ON">
      <entry>setLEDon();</entry>
      <tran trig="TIMEOUT" target="../../2">
       <tran_glyph conn="44,58,2,2,2,-22,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="36,49,14,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="10,43,44,20">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="SHUTDOWN">
     <entry>setLEDoff();</entry>
     <tran trig="OFF_BLINK" target="../../3">
      <tran_glyph conn="42,33,3,1,-20">
       <action box="-8,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="42,29,12,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_glyph node="8,11,50,55"/>
   </state>
   <state_diagram size="69,69"/>
  </statechart>
 </class>
 <attribute name="AO_TLtraffic[N_TL]" type="QActive * const" visibility="0x00" properties="0x00"/>
 <attribute name="AO_TLpedestrian" type="QActive * const" visibility="0x00" properties="0x00"/>
 <attribute name="AO_TLblinker" type="QActive * const" visibility="0x00" properties="0x00"/>
 <operation name="TLtraffic_ctor" type="void" visibility="0x00" properties="0x00">
  <code>uint8_t n;

for (n = 0; n &lt; N_TL; n++)
{
    TLtraffic *me = &amp;l_traffic[n];

    QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLtraffic_initial));
    QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);
    me-&gt;identity = (eTLidentity_t)n;
    Q_ENSURE((me-&gt;identity == TrafficLightA) || (me-&gt;identity == TrafficLightB));
    me-&gt;light = RED;

    me-&gt;toInit = T_5sec;
    me-&gt;toEmergency = T_10sec;
    me-&gt;toInitEmergency = T_500ms;
    me-&gt;toRed = T_2sec;
    me-&gt;toYellow = T_2sec;
    me-&gt;toGreen1 = T_5sec;
    me-&gt;toGreen2 = T_5sec;
}</code>
 </operation>
 <operation name="TLpedestrian_ctor" type="void" visibility="0x00" properties="0x00">
  <code>TLpedestrian *me = &amp;l_pedestrian;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLpedestrian_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);

me-&gt;light = RED;
me-&gt;tlRedCount = 0;

me-&gt;ledStatus = 0;

me-&gt;toRed = T_2sec;
me-&gt;toGreen = T_5sec;</code>
 </operation>
 <operation name="TLblinker_ctor" type="void" visibility="0x00" properties="0x00">
  <code>TLblinker *me = &amp;l_blinker;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLblinker_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
 </operation>
</package>
