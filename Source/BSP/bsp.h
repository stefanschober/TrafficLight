//$file${../BSP::bsp.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: TrafficLight.qm
// File:  ${../BSP::bsp.h}
//
// This code has been generated by QM 6.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../BSP::bsp.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef bsp_h
#define bsp_h

#if defined QWIN_GUI
#  define BSP_TICKS_PER_SEC    100U
#else
#  define BSP_TICKS_PER_SEC   1000U
#endif

#ifdef Q_SPY
    enum {
        TL_STAT = QS_USER,
        PHILO_STAT,
        COMMAND_STAT
    };
    enum AppRecords
    { /* application-specific trace records */
        TL_APP = QS_USER
    };

     typedef struct std_sender_id {
         uint8_t prio;
     } StdSenderId_t;
#else
    typedef uint8_t StdSenderId_t;
#endif
extern StdSenderId_t const l_SysTick_Handler,
                           l_Button_Handler;

// function prototypes
void BSP_HW_init(void);
void BSP_init(int argc, char *argv[]);
void BSP_terminate(int16_t result);

void BSP_setlight(eTLidentity_t id, uint8_t light);
void BSP_setPedLed(uint16_t status);
void BSP_publishBtnEvt(void);
void BSP_publishEmergencyEvt(void);

/* "Ticker" active object for tick rate 0 */
//$declare${AOs::the_Ticker0} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::the_Ticker0} ........................................................
extern QActive * const the_Ticker0;
//$enddecl${AOs::the_Ticker0} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif /* bsp_h */
