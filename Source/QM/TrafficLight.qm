<?xml version="1.0" encoding="UTF-8"?>
<model version="6.2.3" links="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm.xsd">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="TLtraffic" superclass="qpc::QActive">
   <attribute name="identity" type="eTLidentity_t" visibility="0x02" properties="0x00"/>
   <attribute name="light" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="toGreen1" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toGreen2" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toYellow" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toRed" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toEmergency" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toInitEmergency" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toInit" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toRdYlw" type="uint32_t" visibility="0x00" properties="0x00"/>
   <operation name="setLight" type="void" visibility="0x02" properties="0x00">
    <parameter name="light" type="uint8_t"/>
    <code>me-&gt;light = light;
BSP_setlight(me-&gt;identity, me-&gt;light);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_subscribe((QActive *)me, PL_IS_RED_SIG);
QActive_subscribe((QActive *)me, STARTNEWCYCLE_SIG);
QActive_subscribe((QActive *)me, PEDREQUEST_SIG);
QActive_subscribe((QActive *)me, EMERGENCY_SIG);
QActive_subscribe((QActive *)me, EM_RELEASE_SIG);</action>
     <initial_glyph conn="30,4,5,0,32,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="RUN">
     <initial target="../3">
      <action>startTimeout(me-&gt;toInit); // was 10sec</action>
      <initial_glyph conn="16,22,4,0,10">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="EMERGENCY" target="../6">
      <tran_glyph conn="16,119,2,2,-41">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="RED">
      <entry>TLtraffic_setLight(me, RED);</entry>
      <initial target="../1">
       <action>sendMessage(TL_IS_RED_SIG);</action>
       <initial_glyph conn="60,18,4,3,8,5">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="RED_1">
       <tran trig="PEDREQUEST" target="../../2">
        <action>sendMessage(TL_IS_RED_SIG);</action>
        <tran_glyph conn="83,22,1,3,15">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="STARTNEWCYCLE" target="../../3">
        <tran_glyph conn="75,30,2,0,4">
         <action box="1,1,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="65,16,18,14"/>
      </state>
      <state name="RED_2">
       <tran trig="PL_IS_RED" target="../../1">
        <tran_glyph conn="98,26,3,1,-15">
         <action box="-9,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="STARTNEWCYCLE" target="../../4">
        <tran_glyph conn="108,30,2,0,4">
         <action box="0,1,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="98,16,18,14"/>
      </state>
      <state name="RED_3">
       <entry>startTimeout(me-&gt;toRed);</entry>
       <tran trig="TIMEOUT" target="../../../7">
        <tran_glyph conn="73,48,2,0,6,-19,6">
         <action box="-3,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="PEDREQUEST" target="../../4">
        <action>sendMessage(TL_IS_RED_SIG);</action>
        <tran_glyph conn="83,44,1,3,15">
         <action box="0,0,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="65,34,18,14">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="RED_4">
       <tran trig="PL_IS_RED" target="../../3">
        <tran_glyph conn="98,38,3,1,-15">
         <action box="-9,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="98,34,18,14"/>
      </state>
      <state_glyph node="58,12,62,40">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="INIT_TL">
      <entry>TLtraffic_setLight(me, RED);</entry>
      <tran trig="TIMEOUT">
       <choice target="../../../2">
        <guard>else</guard>
        <choice_glyph conn="38,38,5,3,20">
         <action box="2,-2,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../7">
        <guard>( TrafficLightA == (me-&gt;identity) )</guard>
        <choice_glyph conn="38,38,4,3,30,6">
         <action box="1,9,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="26,38,1,-1,12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,32,20,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="GREEN">
      <entry>sendMessage(GLOBAL_START_SIG);
TLtraffic_setLight(me, GREEN);</entry>
      <initial target="../2">
       <initial_glyph conn="47,88,4,3,5,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="TIMEOUT,PEDREQUEST" target="../../5">
       <tran_glyph conn="90,105,1,3,11">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="GREEN_1">
       <entry>startTimeout(me-&gt;toGreen1); // was 10s</entry>
       <tran trig="TIMEOUT" target="../../3">
        <tran_glyph conn="66,92,1,3,5">
         <action box="0,0,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="PEDREQUEST" target="../../4">
        <tran_glyph conn="57,97,2,0,4">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="49,87,17,10">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="GREEN_2">
       <entry>startTimeout(me-&gt;toGreen2); // was 20s</entry>
       <state_glyph node="71,87,16,10">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="GREEN_3">
       <state_glyph node="49,101,16,10"/>
      </state>
      <state_glyph node="44,82,46,34">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="YELLOW">
      <entry>TLtraffic_setLight(me, YELLOW);
startTimeout(me-&gt;toYellow); // was 5s</entry>
      <initial target="../1">
       <initial_glyph conn="115,114,4,2,-4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="YELLOW_1">
       <tran trig="TIMEOUT" target="../../2">
        <action>sendMessage(STARTNEWCYCLE_SIG);</action>
        <tran_glyph conn="115,102,0,2,-8">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="108,102,14,8"/>
      </state>
      <state name="YELLOW_2">
       <tran trig="STARTNEWCYCLE" target="../../../2">
        <tran_glyph conn="114,88,0,2,-36">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="108,88,14,6"/>
      </state>
      <state_glyph node="101,82,28,34">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="EMERGENCY">
      <entry>TLtraffic_setLight(me, RED);
startTimeout(me-&gt;toEmergency); // was 10sec</entry>
      <tran trig="TIMEOUT,EM_RELEASE" target="../../3">
       <action>startTimeout(me-&gt;toInitEmergency); // was 10sec</action>
       <tran_glyph conn="16,64,0,2,-18">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,64,20,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_YELLOW_1">
      <entry>startTimeout(me-&gt;toRdYlw);
TLtraffic_setLight(me, RED_YELLOW);</entry>
      <tran trig="TIMEOUT" target="../../4">
       <tran_glyph conn="56,76,2,0,6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="44,60,22,16">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,8,132,111"/>
    </state>
    <state_diagram size="135,123"/>
   </statechart>
  </class>
  <class name="TLpedestrian" superclass="qpc::QActive">
   <attribute name="light" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="tlRedCount" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="ledStatus" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="toRed" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="toGreen" type="uint32_t" visibility="0x00" properties="0x00"/>
   <operation name="sendMessage" type="void" visibility="0x02" properties="0x00">
    <parameter name="msg" type="uint16_t"/>
    <code>QEvt *evt = Q_NEW(QEvt, msg);
Q_ASSERT(evt != (void *)0);
QF_PUBLISH(evt, (QActive *)me);</code>
   </operation>
   <operation name="setLight" type="void" visibility="0x02" properties="0x00">
    <parameter name="light" type="uint8_t"/>
    <code>me-&gt;light = light;
BSP_setlight(PedestrianLight, me-&gt;light);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_subscribe((QActive *)me, TL_IS_RED_SIG);
QActive_subscribe((QActive *)me, BUTTON_SIG);
QActive_subscribe((QActive *)me, GLOBAL_START_SIG);
QActive_subscribe((QActive *)me, EMERGENCY_SIG);
QActive_subscribe((QActive *)me, EM_RELEASE_SIG);</action>
     <initial_glyph conn="16,4,5,0,16,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="RUN">
     <initial target="../4">
      <initial_glyph conn="10,20,5,3,6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="EMERGENCY" target="../4">
      <tran_glyph conn="24,10,0,0,6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="GREEN">
      <entry>TLpedestrian_setLight(me, GREEN);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, me-&gt;toGreen); // was 15s</entry>
      <tran trig="TIMEOUT" target="../../3">
       <action>TLpedestrian_sendMessage(me, PL_IS_RED_SIG);</action>
       <tran_glyph conn="39,20,3,0,-3,12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="39,16,15,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED">
      <entry>TLpedestrian_setLight(me, RED);
TLpedestrian_sendMessage(me, OFF_BLINK_SIG);</entry>
      <exit>TLpedestrian_sendMessage(me, STOP_BLINK_SIG);</exit>
      <initial target="../5">
       <initial_glyph conn="18,40,5,3,6">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="RED_3">
       <entry>TLpedestrian_sendMessage(me, PEDREQUEST_SIG);</entry>
       <tran trig="TL_IS_RED" target="../../4">
        <tran_glyph conn="46,64,0,2,-6">
         <action box="-5,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="40,64,12,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="RED_5">
       <entry>QTimeEvt_rearm(&amp;me-&gt;timeEvt, me-&gt;toRed);
me-&gt;tlRedCount = 0;</entry>
       <tran trig="TIMEOUT" target="../../../2">
        <tran_glyph conn="46,36,0,2,-12">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="40,36,12,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="RED_2">
       <exit>TLpedestrian_sendMessage(me, START_BLINK_SIG);</exit>
       <tran trig="BUTTON" target="../../1">
        <tran_glyph conn="36,54,1,3,2,13,2">
         <action box="-1,5,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="24,50,12,8">
        <exit box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="RED_4">
       <tran trig="TL_IS_RED" target="../../2">
        <tran_glyph conn="46,50,0,2,-6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="40,50,12,8"/>
      </state>
      <state name="RED_1">
       <tran trig="GLOBAL_START" target="../../3">
        <tran_glyph conn="30,44,2,0,6">
         <action box="-4,2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="BUTTON" target="../../6">
        <action>TLpedestrian_sendMessage(me, START_BLINK_SIG);</action>
        <tran_glyph conn="24,42,3,3,-4,26,4">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="24,36,12,8"/>
      </state>
      <state name="RED_6">
       <entry>TLpedestrian_sendMessage(me, START_BLINK_SIG);</entry>
       <tran trig="GLOBAL_START" target="../../1">
        <tran_glyph conn="36,70,1,3,4">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="24,64,12,8">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="16,32,38,45">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="INIT_WAIT">
      <entry>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
TLpedestrian_setLight(me, RED);</entry>
      <tran trig="GLOBAL_START" target="../../3">
       <tran_glyph conn="24,24,2,0,8">
        <action box="-12,1,12,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="16,16,16,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="8,10,50,70"/>
    </state>
    <state_diagram size="108,85"/>
   </statechart>
  </class>
  <class name="TLblinker" superclass="qpc::QActive">
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="setLed" type="void" visibility="0x00" properties="0x00">
    <parameter name="ledStatus" type="uint16_t"/>
    <code>Q_ASSERT((ledStatus == ledON) || (ledStatus == ledOFF));
BSP_setPedLed(ledStatus);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_subscribe((QActive *)me, START_BLINK_SIG);
QActive_subscribe((QActive *)me, STOP_BLINK_SIG);
QActive_subscribe((QActive *)me, OFF_BLINK_SIG);
QActive_subscribe((QActive *)me, GLOBAL_START_SIG);
QActive_subscribe((QActive *)me, EMERGENCY_SIG);</action>
     <initial_glyph conn="34,4,4,0,7">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="RUN">
     <initial target="../2">
      <initial_glyph conn="28,18,5,1,-6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="EMERGENCY" target="../2">
      <tran_glyph conn="42,11,0,1,9,-20">
       <action box="-11,7,10,2"/>
      </tran_glyph>
     </tran>
     <state name="INIT">
      <entry>setLEDoff();</entry>
      <tran trig="GLOBAL_START" target="../../3">
       <tran_glyph conn="16,23,2,0,6">
        <action box="-4,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="10,15,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="INACTIVE">
      <entry>setLEDon();</entry>
      <tran trig="START_BLINK" target="../../4">
       <tran_glyph conn="16,37,2,0,6">
        <action box="-4,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="10,29,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="ACTIVE">
      <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, T_250ms, T_250ms);</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
      <initial target="../2">
       <initial_glyph conn="12,47,4,3,6,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="STOP_BLINK" target="../../5">
       <tran_glyph conn="48,43,0,2,-6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="OFF">
       <entry>setLEDoff();</entry>
       <tran trig="TIMEOUT" target="../../3">
        <tran_glyph conn="22,49,0,0,-2,22,2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="14,49,14,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="ON">
       <entry>setLEDon();</entry>
       <tran trig="TIMEOUT" target="../../2">
        <tran_glyph conn="44,58,2,2,2,-22,-2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,49,14,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="10,43,44,20">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="SHUTDOWN">
      <entry>setLEDoff();</entry>
      <tran trig="OFF_BLINK" target="../../3">
       <tran_glyph conn="42,33,3,1,-20">
        <action box="-8,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,29,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="8,11,50,55"/>
    </state>
    <state_diagram size="69,69"/>
   </statechart>
  </class>
  <attribute name="AO_TLtrafficA" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_TLpedestrian" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_TLblinker" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="the_Ticker0" type="QActive * const" visibility="0x00" properties="0x00">
   <code> = (QActive * const)&amp;l_ticker0.super;</code>
  </attribute>
  <attribute name="l_ticker0" type="QTicker" visibility="0x02" properties="0x00"/>
  <operation name="TLtraffic_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QS_FUN_DICTIONARY(TLtraffic_initial);
QS_FUN_DICTIONARY(TLtraffic_RUN);
QS_FUN_DICTIONARY(TLtraffic_EMERGENCY);
QS_FUN_DICTIONARY(TLtraffic_INIT_TL);
QS_FUN_DICTIONARY(TLtraffic_GREEN);
QS_FUN_DICTIONARY(TLtraffic_GREEN_1);
QS_FUN_DICTIONARY(TLtraffic_GREEN_2);
QS_FUN_DICTIONARY(TLtraffic_GREEN_3);
QS_FUN_DICTIONARY(TLtraffic_YELLOW);
QS_FUN_DICTIONARY(TLtraffic_YELLOW_1);
QS_FUN_DICTIONARY(TLtraffic_YELLOW_2);
QS_FUN_DICTIONARY(TLtraffic_RED);
QS_FUN_DICTIONARY(TLtraffic_RED_1);
QS_FUN_DICTIONARY(TLtraffic_RED_2);
QS_FUN_DICTIONARY(TLtraffic_RED_3);
QS_FUN_DICTIONARY(TLtraffic_RED_4);

QS_OBJ_DICTIONARY(AO_TLtrafficA);
QS_OBJ_DICTIONARY(AO_TLtrafficB);

for (uint8_t n = 0; n &lt; N_TL; n++)
{
    TLtraffic *me = l_traffic[n];

    QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLtraffic_initial));
    QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);
    me-&gt;identity = (eTLidentity_t)n;
    Q_ENSURE((me-&gt;identity == TrafficLightA) || (me-&gt;identity == TrafficLightB));
    me-&gt;light = RED;

    me-&gt;toInit = T_5sec;
    me-&gt;toEmergency = T_10sec;
    me-&gt;toInitEmergency = T_500ms;
    me-&gt;toRed = T_2sec;
    me-&gt;toYellow = T_2sec;
    me-&gt;toRdYlw = T_2sec;
    me-&gt;toGreen1 = T_5sec;
    me-&gt;toGreen2 = T_5sec;
}</code>
  </operation>
  <operation name="TLpedestrian_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TLpedestrian *me = &amp;l_pedestrian;

QS_FUN_DICTIONARY(TLpedestrian_initial);
QS_FUN_DICTIONARY(TLpedestrian_RUN);
QS_FUN_DICTIONARY(TLpedestrian_GREEN);
QS_FUN_DICTIONARY(TLpedestrian_RED);
QS_FUN_DICTIONARY(TLpedestrian_RED_1);
QS_FUN_DICTIONARY(TLpedestrian_RED_2);
QS_FUN_DICTIONARY(TLpedestrian_RED_3);
QS_FUN_DICTIONARY(TLpedestrian_RED_4);
QS_FUN_DICTIONARY(TLpedestrian_RED_5);
QS_FUN_DICTIONARY(TLpedestrian_INIT_WAIT);
QS_OBJ_DICTIONARY(AO_TLpedestrian);

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLpedestrian_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);

me-&gt;light = RED;
me-&gt;tlRedCount = 0;

me-&gt;ledStatus = 0;

me-&gt;toRed = T_2sec;
me-&gt;toGreen = T_5sec;</code>
  </operation>
  <operation name="TLblinker_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TLblinker *me = &amp;l_blinker;

QS_FUN_DICTIONARY(TLblinker_initial);
QS_FUN_DICTIONARY(TLblinker_RUN);
QS_FUN_DICTIONARY(TLblinker_INIT);
QS_FUN_DICTIONARY(TLblinker_INACTIVE);
QS_FUN_DICTIONARY(TLblinker_ACTIVE);
QS_FUN_DICTIONARY(TLblinker_OFF);
QS_FUN_DICTIONARY(TLblinker_ON);
QS_FUN_DICTIONARY(TLblinker_SHUTDOWN);
QS_OBJ_DICTIONARY(AO_TLblinker);

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLblinker_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
  <operation name="Ticker_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QS_OBJ_DICTIONARY(the_Ticker0);

QTicker_ctor(&amp;l_ticker0, 0U); /* ticker AO for tick rate 0 */</code>
  </operation>
  <operation name="callConstructors" type="void" visibility="0x00" properties="0x00">
   <code>Ticker_ctor();
TLtraffic_ctor(); /* instantiate all Philosopher active objects */
TLpedestrian_ctor(); /* instantiate the Table active object */
TLblinker_ctor();</code>
  </operation>
  <operation name="startAllActiveObjects" type="void" visibility="0x00" properties="0x00">
   <code>uint_fast8_t aoPrio = 1u;

QACTIVE_START(the_Ticker0, aoPrio++, 0, 0, 0, 0, 0);

/* start the active objects... */
QACTIVE_START(AO_TLtrafficA,           /* AO to start */
              aoPrio++, /* QP priority of the AO */
              trafficQueueStoA,      /* event queue storage */
              Q_DIM(trafficQueueStoA), /* queue length [events] */
              (void *)0,             /* stack storage (not used) */
              0U,                    /* size of the stack [bytes] */
             (QEvt *)0);             /* initialization event */

QACTIVE_START(AO_TLtrafficB,           /* AO to start */
              aoPrio++, /* QP priority of the AO */
              trafficQueueStoB,      /* event queue storage */
              Q_DIM(trafficQueueStoB), /* queue length [events] */
              (void *)0,             /* stack storage (not used) */
              0U,                    /* size of the stack [bytes] */
             (QEvt *)0);             /* initialization event */

QACTIVE_START(AO_TLpedestrian,                  /* AO to start */
              aoPrio++, /* QP priority of the AO */
              pedestrianQueueSto,             /* event queue storage */
              Q_DIM(pedestrianQueueSto),      /* queue length [events] */
              (void *)0,                 /* stack storage (not used) */
              0U,                        /* size of the stack [bytes] */
              (QEvt *)0);                /* initialization event */

QACTIVE_START(AO_TLblinker,                  /* AO to start */
              aoPrio++, /* QP priority of the AO */
              blinkerQueueSto,             /* event queue storage */
              Q_DIM(blinkerQueueSto),      /* queue length [events] */
              (void *)0,                 /* stack storage (not used) */
              0U,                        /* size of the stack [bytes] */
              (QEvt *)0);                /* initialization event */</code>
  </operation>
  <attribute name="AO_TLtrafficB" type="QActive * const" visibility="0x00" properties="0x00"/>
 </package>
 <package name="Events" stereotype="0x01">
  <class name="TLevt" superclass="qpc::QEvt"/>
 </package>
 <directory name="./Source">
  <file name="TLtraffic.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

#define startTimeout(timeout)    QTimeEvt_rearm(&amp;me-&gt;timeEvt, timeout)
#define sendMessage(msg)         { QEvt *e = Q_NEW(QEvt, msg); QF_PUBLISH(e, (QActive *)me); }
/* helper macro to provide the ID of Philo &quot;me_&quot; */
// #define TL_ID(me_)    ((eTLidentity_t)((me_) - l_traffic))

/* Active object class -----------------------------------------------------*/
$declare(AOs::TLtraffic)

/* Local objects -----------------------------------------------------------*/
static TLtraffic l_trafficA;   /* storage for all TLs */
static TLtraffic l_trafficB;   /* storage for all TLs */
static TLtraffic *l_traffic[N_TL] = {
    &amp;l_trafficA,
    &amp;l_trafficB
};

/* Global objects ----------------------------------------------------------*/
QActive * const AO_TLtrafficA = &amp;l_trafficA.super; /* &quot;opaque&quot; pointers to TL AO */
QActive * const AO_TLtrafficB = &amp;l_trafficB.super; /* &quot;opaque&quot; pointers to TL AO */

/* TL definition --------------------------------------------------------*/
$define(AOs::TLtraffic_ctor)
$define(AOs::TLtraffic)
</text>
  </file>
  <file name="TLpedestrian.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

/* Active object class -----------------------------------------------------*/
$declare(AOs::TLpedestrian)

/* Local objects -----------------------------------------------------------*/
static TLpedestrian l_pedestrian;   /* storage for PL */

/* Global objects ----------------------------------------------------------*/
QActive * const AO_TLpedestrian = &amp;l_pedestrian.super;   /* &quot;opaque&quot; pointer to PL AO */

/* PL definition --------------------------------------------------------*/
$define(AOs::TLpedestrian_ctor)
$define(AOs::TLpedestrian)</text>
  </file>
  <file name="TLmain.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

/* &quot;fudge factor&quot; for Windows, see NOTE1 */
enum { WIN_FUDGE_FACTOR = WIN_FUDGE };

Q_DEFINE_THIS_FILE

$declare${AOs::Ticker_ctor}
$declare${AOs::callConstructors}
$declare${AOs::startAllActiveObjects}

/* AO event queues &amp; event pool data storage */
static QEvt const *trafficQueueStoA[5 * WIN_FUDGE_FACTOR];
static QEvt const *trafficQueueStoB[5 * WIN_FUDGE_FACTOR];
static QEvt const *pedestrianQueueSto[5 * WIN_FUDGE_FACTOR];
static QEvt const *blinkerQueueSto[5 * WIN_FUDGE_FACTOR];
static QSubscrList subscrSto[MAX_PUBLISH_SIG];
static QF_MPOOL_EL(QEvt) smlPoolSto[10 * WIN_FUDGE_FACTOR];

/*..........................................................................*/

int tlMain(void)
{
    /* object dictionaries... */
    QS_OBJ_DICTIONARY(smlPoolSto);
    QS_OBJ_DICTIONARY(pedestrianQueueSto);
    QS_OBJ_DICTIONARY(trafficQueueStoA);
    QS_OBJ_DICTIONARY(trafficQueueStoB);
    QS_OBJ_DICTIONARY(blinkerQueueSto);

    QS_SIG_DICTIONARY(TIME_TICK_SIG, (void *)0);
    QS_SIG_DICTIONARY(GLOBAL_START_SIG, (void *)0);
    QS_SIG_DICTIONARY(STARTNEWCYCLE_SIG, (void *)0);
    QS_SIG_DICTIONARY(PEDREQUEST_SIG, (void *)0);
    QS_SIG_DICTIONARY(TL_IS_RED_SIG, (void *)0);
    QS_SIG_DICTIONARY(PL_IS_RED_SIG, (void *)0);
    QS_SIG_DICTIONARY(BUTTON_SIG, (void *)0);
    QS_SIG_DICTIONARY(START_BLINK_SIG, (void *)0);
    QS_SIG_DICTIONARY(STOP_BLINK_SIG, (void *)0);
    QS_SIG_DICTIONARY(OFF_BLINK_SIG, (void *)0);
    QS_SIG_DICTIONARY(EMERGENCY_SIG, (void *)0);
    QS_SIG_DICTIONARY(EM_RELEASE_SIG, (void *)0);
    QS_SIG_DICTIONARY(TIMEOUT_SIG, (void *)0);

    /* initialize publish-subscribe... */
    QF_psInit(subscrSto, Q_DIM(subscrSto));

    /* initialize event pools... */
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
    
    /* call all AO constructors */
    callConstructors();

    /* start all AOs */
    startAllActiveObjects();

    return QF_run(); /* run the QF application */
}

/* the ticker */
$define${AOs::l_ticker0}
$define${AOs::the_Ticker0}

$define${AOs::Ticker_ctor}

/* call all constructors */
$define${AOs::callConstructors}

/* start all AOs */
$define${AOs::startAllActiveObjects}

/*****************************************************************************
* NOTE1:
* Windows is not a deterministic real-time system, which means that the
* system can occasionally and unexpectedly &quot;choke and freeze&quot; for a number
* of seconds. The designers of Windows have dealt with these sort of issues
* by massively oversizing the resources available to the applications. For
* example, the default Windows GUI message queues size is 10,000 entries,
* which can dynamically grow to an even larger number. Also the stacks of
* Win32 threads can dynamically grow to several megabytes.
*
* In contrast, the event queues, event pools, and stack size inside the
* real-time embedded (RTE) systems can be (and must be) much smaller,
* because you typically can put an upper bound on the real-time behavior
* and the resulting delays.
*
* To be able to run the unmodified applications designed originally for
* RTE systems on Windows, and to reduce the odds of resource shortages in
* this case, the generous WIN_FUDGE_FACTOR is used to oversize the
* event queues and event pools.
*/</text>
  </file>
  <file name="TLblinker.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

enum {
    ledOFF = 0,
    ledON
};

#define setLEDon()   TLblinker_setLed(me, ledON)
#define setLEDoff()  TLblinker_setLed(me, ledOFF)

/* Active object class -----------------------------------------------------*/
$declare(AOs::TLblinker)

/* Local objects -----------------------------------------------------------*/
static TLblinker l_blinker;   /* storage for PL */

/* Global objects ----------------------------------------------------------*/
QActive * const AO_TLblinker = &amp;l_blinker.super;   /* &quot;opaque&quot; pointer to PL AO */

/* PL definition --------------------------------------------------------*/
$define(AOs::TLblinker_ctor)
$define(AOs::TLblinker)</text>
  </file>
 </directory>
 <directory name="../include">
  <file name="trafficlight.h">
   <text>#ifndef trafficlight_h
#define trafficlight_h

enum TLSignals {
    TIME_TICK_SIG = Q_USER_SIG, /* time ticker event */
    GLOBAL_START_SIG,
    STARTNEWCYCLE_SIG,             /* published by traffic light to start cycle */
    PEDREQUEST_SIG,       /* published by pedestrian light to start cycle */
    TL_IS_RED_SIG,
    PL_IS_RED_SIG,
    BUTTON_SIG,                 /* published by BSP to notify about pedestrian requests */
    START_BLINK_SIG,
    STOP_BLINK_SIG,
    OFF_BLINK_SIG,
    EMERGENCY_SIG,
    EM_RELEASE_SIG,
    MAX_PUBLISH_SIG,
    TIMEOUT_SIG,                /* used for time events */
    MAX_SIG                     /* the last signal */
};

typedef enum TLidentity {
    TrafficLightA = 0,
    TrafficLightB,
    PedestrianLight,
    MaxIdentity
} eTLidentity_t;

#if 0
typedef enum TLlight {
    RED = 0,
    RED_YELLOW,
    YELLOW,
    GREEN,
    NO_LIGHT
} eTLlight_t;
#endif
#define NO_LIGHT   0x00u
#define RED        0x01u
#define YELLOW     0x02u
#define GREEN      0x04u
#define RED_YELLOW (RED | YELLOW)
#define MAX_LIGHT  3 // Red, Yellow, Green

#define _TIMETICK_(t)    ((t) * (BSP_TICKS_PER_SEC))
#define _TIMETICKms_(t)  ((_TIMETICK_(t) / 1000u) ? (_TIMETICK_(t) / 1000u) : 1u)

/* timeout definitions */
#define T_5ms     _TIMETICKms_(5u)
#define T_10ms    _TIMETICKms_(10u)
#define T_50ms    _TIMETICKms_(50u) 
#define T_100ms   _TIMETICKms_(100u) 
#define T_250ms   _TIMETICKms_(250u) 
#define T_500ms   _TIMETICKms_(500u) 
#define T_1sec    _TIMETICKms_(1000u)
#define T_2sec    _TIMETICK_(2u)
#define T_5sec    _TIMETICK_(5u)
#define T_10sec   _TIMETICK_(10u)
#define T_15sec   _TIMETICK_(15u)
#define T_20sec   _TIMETICK_(20u)
#define T_30sec   _TIMETICK_(30u)

#define N_TL    (2u)

$declare(Events::TLevt)

$declare(AOs::TLtraffic_ctor)
$declare(AOs::AO_TLtrafficA)
$declare(AOs::AO_TLtrafficB)

$declare(AOs::TLpedestrian_ctor)
$declare(AOs::AO_TLpedestrian)

// $declare(AOs::TLbutton_ctor)
// $declare(AOs::AO_TLbutton)

$declare(AOs::TLblinker_ctor)
$declare(AOs::AO_TLblinker)

int tlMain(void);

#endif /* trafficlight_h */</text>
  </file>
  <file name="bsp.h">
   <text>#ifndef bsp_h
#define bsp_h

/* WIN_FUDGE = &quot;fudge factor&quot; for Windows, see NOTE1 */
#if defined QWIN_GUI
#  define BSP_TICKS_PER_SEC    100U
#  define WIN_FUDGE             10U
#else
#  define BSP_TICKS_PER_SEC   1000U
#  define WIN_FUDGE              1U
#endif

#ifdef Q_SPY
    // application-specific trace records
    enum AppRecords {
        TL_APP = QS_USER,
        TL_STAT,
        PHILO_STAT,
        COMMAND_STAT
    };

     typedef struct std_sender_id {
         uint8_t prio;
     } StdSenderId_t;
#else
    typedef uint8_t StdSenderId_t;
#endif
extern StdSenderId_t const l_SysTick_Handler,
                           l_Button_Handler;

// function prototypes
void BSP_HW_init(void);
void BSP_init(int argc, char *argv[]);
void BSP_terminate(int16_t result);

void BSP_setlight(eTLidentity_t id, uint8_t light);
void BSP_setPedLed(uint16_t status);
void BSP_publishBtnEvt(void);
void BSP_publishEmergencyEvt(void);

/* &quot;Ticker&quot; active object for tick rate 0 */
$declare${AOs::the_Ticker0}

#endif /* bsp_h */</text>
  </file>
 </directory>
</model>
