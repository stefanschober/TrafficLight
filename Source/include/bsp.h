//$file${../include::bsp.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: TrafficLight.qm
// File:  ${../include::bsp.h}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../include::bsp.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef bsp_h
#define bsp_h

/* WIN_FUDGE = "fudge factor" for Windows, see NOTE1 */
#if defined QWIN_GUI
#  define BSP_TICKS_PER_SEC    100U
#  define WIN_FUDGE             10U
#else
#  define BSP_TICKS_PER_SEC   1000U
#  define WIN_FUDGE              1U
#endif

#ifdef Q_SPY
    // application-specific trace records
    enum AppRecords {
        TL_APP = QS_USER,
        TL_STAT,
        PHILO_STAT,
        COMMAND_STAT
    };

     typedef struct std_sender_id {
         uint8_t prio;
     } StdSenderId_t;
#else
    typedef uint8_t StdSenderId_t;
#endif
extern StdSenderId_t const l_SysTick_Handler,
                           l_Button_Handler;

// function prototypes
void BSP_HW_init(void);
void BSP_init(int argc, char *argv[]);
void BSP_terminate(int16_t result);

void BSP_setlight(eTLidentity_t id, uint8_t light);
void BSP_setPedLed(uint16_t status);
void BSP_publishBtnEvt(void);
void BSP_publishEmergencyEvt(void);

/* "Ticker" active object for tick rate 0 */
//$declare${AOs::the_Ticker0} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::the_Ticker0} ........................................................
extern QActive * const the_Ticker0;
//$enddecl${AOs::the_Ticker0} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif /* bsp_h */
