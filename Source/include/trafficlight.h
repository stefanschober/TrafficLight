//$file${../include::trafficlight.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: TrafficLight.qm
// File:  ${../include::trafficlight.h}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../include::trafficlight.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef trafficlight_h
#define trafficlight_h

enum TLSignals {
    TIME_TICK_SIG = Q_USER_SIG, /* time ticker event */
    GLOBAL_START_SIG,
    STARTNEWCYCLE_SIG,             /* published by traffic light to start cycle */
    PEDREQUEST_SIG,       /* published by pedestrian light to start cycle */
    TL_IS_RED_SIG,
    PL_IS_RED_SIG,
    BUTTON_SIG,                 /* published by BSP to notify about pedestrian requests */
    START_BLINK_SIG,
    STOP_BLINK_SIG,
    OFF_BLINK_SIG,
    EMERGENCY_SIG,
    EM_RELEASE_SIG,
    MAX_PUBLISH_SIG,
    TIMEOUT_SIG,                /* used for time events */
    MAX_SIG                     /* the last signal */
};

typedef enum TLidentity {
    TrafficLightA = 0,
    TrafficLightB,
    PedestrianLight,
    MaxIdentity
} eTLidentity_t;

#if 0
typedef enum TLlight {
    RED = 0,
    RED_YELLOW,
    YELLOW,
    GREEN,
    NO_LIGHT
} eTLlight_t;
#endif
#define NO_LIGHT   0x00u
#define RED        0x01u
#define YELLOW     0x02u
#define GREEN      0x04u
#define RED_YELLOW (RED | YELLOW)
#define MAX_LIGHT  3 // Red, Yellow, Green

#define _TIMETICK_(t)    ((t) * (BSP_TICKS_PER_SEC))
#define _TIMETICKms_(t)  ((_TIMETICK_(t) / 1000u) ? (_TIMETICK_(t) / 1000u) : 1u)

/* timeout definitions */
#define T_5ms     _TIMETICKms_(5u)
#define T_10ms    _TIMETICKms_(10u)
#define T_50ms    _TIMETICKms_(50u)
#define T_100ms   _TIMETICKms_(100u)
#define T_250ms   _TIMETICKms_(250u)
#define T_500ms   _TIMETICKms_(500u)
#define T_1sec    _TIMETICKms_(1000u)
#define T_2sec    _TIMETICK_(2u)
#define T_5sec    _TIMETICK_(5u)
#define T_10sec   _TIMETICK_(10u)
#define T_15sec   _TIMETICK_(15u)
#define T_20sec   _TIMETICK_(20u)
#define T_30sec   _TIMETICK_(30u)

#define N_TL    (2u)

//$declare${Events::TLevt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Events::TLevt} ...........................................................
typedef struct {
// protected:
    QEvt super;
} TLevt;
//$enddecl${Events::TLevt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$declare${AOs::TLtraffic_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::TLtraffic_ctor} .....................................................
void TLtraffic_ctor(void);
//$enddecl${AOs::TLtraffic_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::AO_TLtrafficA} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_TLtrafficA} ......................................................
extern QActive * const AO_TLtrafficA;
//$enddecl${AOs::AO_TLtrafficA} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::AO_TLtrafficB} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_TLtrafficB} ......................................................
extern QActive * const AO_TLtrafficB;
//$enddecl${AOs::AO_TLtrafficB} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$declare${AOs::TLpedestrian_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::TLpedestrian_ctor} ..................................................
void TLpedestrian_ctor(void);
//$enddecl${AOs::TLpedestrian_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::AO_TLpedestrian} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_TLpedestrian} ....................................................
extern QActive * const AO_TLpedestrian;
//$enddecl${AOs::AO_TLpedestrian} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// $declare(AOs::TLbutton_ctor)
// $declare(AOs::AO_TLbutton)

//$declare${AOs::TLblinker_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::TLblinker_ctor} .....................................................
void TLblinker_ctor(void);
//$enddecl${AOs::TLblinker_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::AO_TLblinker} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_TLblinker} .......................................................
extern QActive * const AO_TLblinker;
//$enddecl${AOs::AO_TLblinker} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

int tlMain(void);

#endif /* trafficlight_h */
