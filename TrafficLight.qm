<?xml version="1.0" encoding="UTF-8"?>
<model version="4.1.2" links="0">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="TLtraffic" superclass="qpc::QActive">
   <attribute name="identity" type="eTLidentity_t" visibility="0x02" properties="0x00"/>
   <attribute name="light" type="eTLlight_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="setLight" type="void" visibility="0x02" properties="0x00">
    <parameter name="light" type="eTLlight_t"/>
    <code>me-&gt;light = light;
BSP_setlight(me-&gt;identity, me-&gt;light);</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>QS_FUN_DICTIONARY(TLtraffic_initial);
QS_FUN_DICTIONARY(TLtraffic_INIT_TL);
QS_FUN_DICTIONARY(TLtraffic_GREEN);
QS_FUN_DICTIONARY(TLtraffic_GREEN_1);
QS_FUN_DICTIONARY(TLtraffic_GREEN_2);
QS_FUN_DICTIONARY(TLtraffic_GREEN_3);
QS_FUN_DICTIONARY(TLtraffic_YELLOW);
QS_FUN_DICTIONARY(TLtraffic_YELLOW_1);
QS_FUN_DICTIONARY(TLtraffic_YELLOW_2);
QS_FUN_DICTIONARY(TLtraffic_RED);
QS_FUN_DICTIONARY(TLtraffic_RED_1);
QS_FUN_DICTIONARY(TLtraffic_RED_2);
QS_FUN_DICTIONARY(TLtraffic_RED_3);
QS_FUN_DICTIONARY(TLtraffic_RED_4);

QActive_subscribe((QActive *)me, PL_IS_RED_SIG);
QActive_subscribe((QActive *)me, STARTNEWCYCLE_SIG);
QActive_subscribe((QActive *)me, PEDREQUEST_SIG);</action>
     <initial_glyph conn="12,12,4,0,10">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="INIT_TL">
     <entry>TLtraffic_setLight(me, RED);
startTimeout(T_2sec); // was 10sec</entry>
     <tran trig="TIMEOUT">
      <choice target="../../../4">
       <guard>else</guard>
       <choice_glyph conn="34,28,5,3,24">
        <action box="2,-2,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../2">
       <guard>( 0 ==TL_ID(me) )</guard>
       <action>sendMessage(GLOBAL_START_SIG);</action>
       <choice_glyph conn="34,28,4,3,35,9">
        <action box="1,9,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="22,28,1,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,22,20,14">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="GREEN">
     <entry>TLtraffic_setLight(me, GREEN);</entry>
     <initial target="../2">
      <initial_glyph conn="46,54,4,3,5,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="TIMEOUT,PEDREQUEST" target="../../3">
      <tran_glyph conn="89,71,1,3,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="GREEN_1">
      <entry>startTimeout(T_5sec); // was 10s
sendMessage(GLOBAL_START_SIG);</entry>
      <tran trig="TIMEOUT" target="../../3">
       <tran_glyph conn="65,58,1,3,5">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PEDREQUEST" target="../../4">
       <tran_glyph conn="56,63,2,0,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="48,53,17,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="GREEN_2">
      <entry>startTimeout(T_5sec); // was 20s</entry>
      <state_glyph node="70,53,16,10">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="GREEN_3">
      <state_glyph node="48,67,16,10"/>
     </state>
     <state_glyph node="43,48,46,34">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="YELLOW">
     <entry>TLtraffic_setLight(me, YELLOW);
startTimeout(T_2sec); // was 5s</entry>
     <initial target="../1">
      <initial_glyph conn="115,80,4,2,-4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="YELLOW_1">
      <tran trig="TIMEOUT" target="../../2">
       <action>sendMessage(STARTNEWCYCLE_SIG);</action>
       <tran_glyph conn="115,68,0,2,-8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="108,68,14,8"/>
     </state>
     <state name="YELLOW_2">
      <tran trig="STARTNEWCYCLE" target="../../../4">
       <tran_glyph conn="114,54,0,2,-12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="108,54,14,6"/>
     </state>
     <state_glyph node="101,48,28,34">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RED">
     <entry>TLtraffic_setLight(me, RED);</entry>
     <initial target="../1">
      <initial_glyph conn="60,8,4,3,8,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="RED_1">
      <entry>sendMessage(TL_IS_RED_SIG);</entry>
      <tran trig="PEDREQUEST" target="../../2">
       <tran_glyph conn="82,12,1,3,16">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="STARTNEWCYCLE" target="../../3">
       <tran_glyph conn="74,20,2,0,4">
        <action box="1,1,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="64,6,18,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_2">
      <entry>sendMessage(TL_IS_RED_SIG);</entry>
      <tran trig="PL_IS_RED" target="../../1">
       <tran_glyph conn="98,16,3,1,-16">
        <action box="-9,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="STARTNEWCYCLE" target="../../4">
       <tran_glyph conn="108,20,2,0,4">
        <action box="0,1,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="98,6,18,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_3">
      <entry>startTimeout(T_2sec);</entry>
      <tran trig="TIMEOUT" target="../../../2">
       <tran_glyph conn="72,38,2,0,10">
        <action box="-3,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PEDREQUEST" target="../../4">
       <tran_glyph conn="82,34,1,3,16">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="64,24,18,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_4">
      <entry>sendMessage(TL_IS_RED_SIG);</entry>
      <tran trig="PL_IS_RED" target="../../3">
       <tran_glyph conn="98,28,3,1,-16">
        <action box="-9,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="98,24,18,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="58,2,62,40">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="135,115"/>
   </statechart>
  </class>
  <class name="TLpedestrian" superclass="qpc::QActive">
   <attribute name="light" type="eTLlight_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="tlRedCount" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="ledStatus" type="uint16_t" visibility="0x00" properties="0x00"/>
   <operation name="sendMessage" type="void" visibility="0x02" properties="0x00">
    <parameter name="msg" type="uint16_t"/>
    <code>QEvt *evt = Q_NEW(QEvt, msg);
Q_ASSERT(evt != (void *)0);
QF_PUBLISH(evt, me);</code>
   </operation>
   <operation name="setLight" type="void" visibility="0x02" properties="0x00">
    <parameter name="light" type="eTLlight_t"/>
    <code>me-&gt;light = light;
BSP_setlight(PedestrianLight, me-&gt;light);</code>
   </operation>
   <statechart>
    <initial target="../3">
     <action>QS_FUN_DICTIONARY(TLpedestrian_initial);
QS_FUN_DICTIONARY(TLpedestrian_GREEN);
QS_FUN_DICTIONARY(TLpedestrian_RED);
QS_FUN_DICTIONARY(TLpedestrian_RED_1);
QS_FUN_DICTIONARY(TLpedestrian_RED_2);
QS_FUN_DICTIONARY(TLpedestrian_RED_3);
QS_FUN_DICTIONARY(TLpedestrian_RED_4);
QS_FUN_DICTIONARY(TLpedestrian_RED_5);
QS_FUN_DICTIONARY(TLpedestrian_INIT_WAIT);

QActive_subscribe((QActive *)me, TL_IS_RED_SIG);
QActive_subscribe((QActive *)me, BUTTON_SIG);
QActive_subscribe((QActive *)me, GLOBAL_START_SIG);

TLpedestrian_setLight(me, RED);</action>
     <initial_glyph conn="8,14,5,3,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="GREEN">
     <entry>TLpedestrian_setLight(me, GREEN);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, T_5sec); // was 15s</entry>
     <tran trig="TIMEOUT" target="../../2">
      <action>TLpedestrian_sendMessage(me, PL_IS_RED_SIG);</action>
      <tran_glyph conn="37,14,3,0,-3,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="37,10,15,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="RED">
     <entry>TLpedestrian_setLight(me, RED);
TLpedestrian_sendMessage(me, OFF_BLINK_SIG);</entry>
     <exit>TLpedestrian_sendMessage(me, STOP_BLINK_SIG);</exit>
     <initial target="../5">
      <initial_glyph conn="16,34,5,3,6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="RED_3">
      <entry>TLpedestrian_sendMessage(me, PEDREQUEST_SIG);</entry>
      <tran trig="TL_IS_RED" target="../../4">
       <tran_glyph conn="44,58,0,2,-6">
        <action box="-5,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="38,58,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_5">
      <entry>QTimeEvt_rearm(&amp;me-&gt;timeEvt, T_2sec);
me-&gt;tlRedCount = 0;</entry>
      <tran trig="TIMEOUT" target="../../../1">
       <tran_glyph conn="44,30,0,2,-12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="38,30,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_2">
      <exit>TLpedestrian_sendMessage(me, START_BLINK_SIG);</exit>
      <tran trig="BUTTON" target="../../1">
       <tran_glyph conn="34,48,1,3,2,13,2">
        <action box="-1,5,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="22,44,12,8">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="RED_4">
      <tran trig="TL_IS_RED" target="../../2">
       <tran_glyph conn="44,44,0,2,-6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="38,44,12,8"/>
     </state>
     <state name="RED_1">
      <tran trig="GLOBAL_START" target="../../3">
       <tran_glyph conn="28,38,2,0,6">
        <action box="-4,2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTON" target="../../6">
       <action>TLpedestrian_sendMessage(me, START_BLINK_SIG);</action>
       <tran_glyph conn="22,36,3,3,-4,26,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="22,30,12,8"/>
     </state>
     <state name="RED_6">
      <entry>TLpedestrian_sendMessage(me, START_BLINK_SIG);</entry>
      <tran trig="GLOBAL_START" target="../../1">
       <tran_glyph conn="34,64,1,3,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="22,58,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="14,26,38,45">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="INIT_WAIT">
     <entry>TLpedestrian_setLight(me, RED);</entry>
     <tran trig="GLOBAL_START" target="../../2">
      <tran_glyph conn="22,18,2,0,8">
       <action box="-12,1,12,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,10,16,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="102,75"/>
   </statechart>
  </class>
  <class name="TLblinker" superclass="qpc::QActive">
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="setLed" type="void" visibility="0x00" properties="0x00">
    <parameter name="ledStatus" type="uint16_t"/>
    <code>Q_ASSERT((ledStatus == ledON) || (ledStatus == ledOFF));
BSP_setPedLed(ledStatus);</code>
   </operation>
   <statechart>
    <initial target="../4">
     <action>QS_FUN_DICTIONARY(TLblinker_initial);
QS_FUN_DICTIONARY(TLblinker_INIT);
QS_FUN_DICTIONARY(TLblinker_INACTIVE);
QS_FUN_DICTIONARY(TLblinker_ACTIVE);
QS_FUN_DICTIONARY(TLblinker_OFF);
QS_FUN_DICTIONARY(TLblinker_ON);
QS_FUN_DICTIONARY(TLblinker_SHUTDOWN);

QActive_subscribe((QActive *)me, START_BLINK_SIG);
QActive_subscribe((QActive *)me, STOP_BLINK_SIG);
QActive_subscribe((QActive *)me, OFF_BLINK_SIG);
QActive_subscribe((QActive *)me, GLOBAL_START_SIG);</action>
     <initial_glyph conn="32,10,5,1,-12">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="INACTIVE">
     <entry>setLEDon();</entry>
     <tran trig="START_BLINK" target="../../2">
      <tran_glyph conn="14,28,2,0,6">
       <action box="-4,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="8,20,12,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="ACTIVE">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, T_250ms, T_250ms);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <initial target="../2">
      <initial_glyph conn="10,38,4,3,6,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="STOP_BLINK" target="../../3">
      <tran_glyph conn="46,34,0,2,-6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="OFF">
      <entry>setLEDoff();</entry>
      <tran trig="TIMEOUT" target="../../3">
       <tran_glyph conn="20,40,0,0,-2,22,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="12,40,14,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="ON">
      <entry>setLEDon();</entry>
      <tran trig="TIMEOUT" target="../../2">
       <tran_glyph conn="42,49,2,2,2,-22,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="34,40,14,9">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="8,34,44,20">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="SHUTDOWN">
     <entry>setLEDoff();</entry>
     <tran trig="OFF_BLINK" target="../../1">
      <tran_glyph conn="40,24,3,1,-20">
       <action box="-8,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="40,20,12,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="INIT">
     <entry>setLEDoff();</entry>
     <tran trig="GLOBAL_START" target="../../1">
      <tran_glyph conn="14,14,2,0,6">
       <action box="-4,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="8,6,12,8">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="69,69"/>
   </statechart>
  </class>
  <attribute name="AO_TLtraffic[N_TL]" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_TLpedestrian" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_TLblinker" type="QActive * const" visibility="0x00" properties="0x00"/>
  <operation name="TLtraffic_ctor" type="void" visibility="0x00" properties="0x00">
   <code>uint8_t n;

for (n = 0; n &lt; N_TL; n++)
{
    TLtraffic *me = &amp;l_traffic[n];

    QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLtraffic_initial));
    QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);
    me-&gt;identity = (eTLidentity_t)n;
    Q_ENSURE((me-&gt;identity == TrafficLightA) || (me-&gt;identity == TrafficLightB));
    me-&gt;light = RED;
}</code>
  </operation>
  <operation name="TLpedestrian_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TLpedestrian *me = &amp;l_pedestrian;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLpedestrian_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);

me-&gt;light = RED;
me-&gt;tlRedCount = 0;

me-&gt;ledStatus = 0;</code>
  </operation>
  <operation name="TLblinker_ctor" type="void" visibility="0x00" properties="0x00">
   <code>TLblinker *me = &amp;l_blinker;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;TLblinker_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <package name="Events" stereotype="0x01">
  <class name="TLevt" superclass="qpc::QEvt"/>
 </package>
 <directory name="./Source">
  <file name="trafficlight.h">
   <text>#ifndef trafficlight_h
#define trafficlight_h

enum TLSignals {
    TIME_TICK_SIG = Q_USER_SIG, /* time ticker event */
    GLOBAL_START_SIG,
    STARTNEWCYCLE_SIG,             /* published by traffic light to start cycle */
    PEDREQUEST_SIG,       /* published by pedestrian light to start cycle */
    TL_IS_RED_SIG,
    PL_IS_RED_SIG,
    BUTTON_SIG,                 /* published by BSP to notify about pedestrian requests */
    START_BLINK_SIG,
    STOP_BLINK_SIG,
    OFF_BLINK_SIG,
    MAX_PUBLISH_SIG,
    TIMEOUT_SIG,                /* used for time events */
    MAX_SIG                     /* the last signal */
};

typedef enum TLidentity eTLidentity_t;
typedef enum TLlight    eTLlight_t;

enum TLidentity {
    TrafficLightA = 0,
    TrafficLightB,
    PedestrianLight,
    MaxIdentity
};

enum TLlight {
    RED = 0,
    YELLOW,
    GREEN,
    NO_LIGHT
};

#define _TIMETICK_(t)    ((t) * (BSP_TICKS_PER_SEC))
#define _TIMETICKms_(t)  ((_TIMETICK_(t) / 1000u) ? (_TIMETICK_(t) / 1000u) : 1u)

/* timeout definitions */
#define T_5ms     _TIMETICKms_(5u)
#define T_10ms    _TIMETICKms_(10u)
#define T_50ms    _TIMETICKms_(50u) 
#define T_100ms   _TIMETICKms_(100u) 
#define T_250ms   _TIMETICKms_(250u) 
#define T_2sec    _TIMETICK_(2u)
#define T_5sec    _TIMETICK_(5u)
#define T_10sec   _TIMETICK_(10u)
#define T_15sec   _TIMETICK_(15u)
#define T_20sec   _TIMETICK_(20u)
#define T_30sec   _TIMETICK_(30u)

$declare(Events::TLevt)

/* number of traffic lights */
#define N_TL ((uint8_t)2)

$declare(AOs::TLtraffic_ctor)
$declare(AOs::AO_TLtraffic[N_TL])

$declare(AOs::TLpedestrian_ctor)
$declare(AOs::AO_TLpedestrian)

// $declare(AOs::TLbutton_ctor)
// $declare(AOs::AO_TLbutton)

$declare(AOs::TLblinker_ctor)
$declare(AOs::AO_TLblinker)

#endif /* trafficlight_h */</text>
  </file>
  <file name="TLtraffic.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

#define startTimeout(timeout)    QTimeEvt_rearm(&amp;me-&gt;timeEvt, timeout)
#define sendMessage(msg)         { QEvt *e = Q_NEW(QEvt, msg); QF_PUBLISH(e, me); }
/* helper macro to provide the ID of Philo &quot;me_&quot; */
#define TL_ID(me_)    ((eTLidentity_t)((me_) - l_traffic))

/* Active object class -----------------------------------------------------*/
$declare(AOs::TLtraffic)

/* Local objects -----------------------------------------------------------*/
static TLtraffic l_traffic[N_TL];   /* storage for all TLs */

/* Global objects ----------------------------------------------------------*/
QActive * const AO_TLtraffic[N_TL] = { /* &quot;opaque&quot; pointers to TL AO */
    &amp;l_traffic[0].super,
    &amp;l_traffic[1].super
};

/* TL definition --------------------------------------------------------*/
$define(AOs::TLtraffic_ctor)
$define(AOs::TLtraffic)
</text>
  </file>
  <file name="TLpedestrian.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

/* Active object class -----------------------------------------------------*/
$declare(AOs::TLpedestrian)

/* Local objects -----------------------------------------------------------*/
static TLpedestrian l_pedestrian;   /* storage for PL */

/* Global objects ----------------------------------------------------------*/
QActive * const AO_TLpedestrian = &amp;l_pedestrian.super;   /* &quot;opaque&quot; pointer to PL AO */

/* PL definition --------------------------------------------------------*/
$define(AOs::TLpedestrian_ctor)
$define(AOs::TLpedestrian)</text>
  </file>
  <file name="TLmain.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

/* &quot;fudge factor&quot; for Windows, see NOTE1 */
#if defined WIN32
#define WIN_FUDGE   10
#else
#define WIN_FUDGE    1
#endif
enum { WIN_FUDGE_FACTOR = WIN_FUDGE };

static QTicker l_ticker0;
QActive *the_Ticker0 = &amp;l_ticker0;

/*..........................................................................*/
#if defined(QWIN_GUI)
#ifdef main
#undef main
#endif

#define main main_gui
int main_gui(int argc, char *argv[]);
#endif
int main(int argc, char *argv[])
{
    static QEvt const *trafficQueueSto[N_TL][5 * WIN_FUDGE_FACTOR];
    static QEvt const *pedestrianQueueSto[5 * WIN_FUDGE_FACTOR];
    static QEvt const *blinkerQueueSto[5 * WIN_FUDGE_FACTOR];
    static QSubscrList subscrSto[MAX_PUBLISH_SIG];
    static QF_MPOOL_EL(QEvt) smlPoolSto[10 * WIN_FUDGE_FACTOR];
    uint8_t n;
    uint_fast8_t aoPrio;

    TLtraffic_ctor(); /* instantiate all Philosopher active objects */
    TLpedestrian_ctor(); /* instantiate the Table active object */
    TLblinker_ctor();
    QTicker_ctor(&amp;l_ticker0, 0U); /* ticker AO for tick rate 0 */

    QF_init();    /* initialize the framework and the underlying RT kernel */
    BSP_init(argc, argv); /* initialize the Board Support Package */

    /* object dictionaries... */
    QS_OBJ_DICTIONARY(smlPoolSto);
    QS_OBJ_DICTIONARY(pedestrianQueueSto);
    QS_OBJ_DICTIONARY(trafficQueueSto[0]);
    QS_OBJ_DICTIONARY(trafficQueueSto[1]);
    QS_OBJ_DICTIONARY(blinkerQueueSto);
    QS_OBJ_DICTIONARY(AO_TLtraffic[0]);
    QS_OBJ_DICTIONARY(AO_TLtraffic[1]);
    QS_OBJ_DICTIONARY(AO_TLpedestrian);
    QS_OBJ_DICTIONARY(AO_TLblinker);

    QS_SIG_DICTIONARY(TIME_TICK_SIG, (void *)0);
    QS_SIG_DICTIONARY(GLOBAL_START_SIG, (void *)0);
    QS_SIG_DICTIONARY(STARTNEWCYCLE_SIG, (void *)0);
    QS_SIG_DICTIONARY(PEDREQUEST_SIG, (void *)0);
    QS_SIG_DICTIONARY(TL_IS_RED_SIG, (void *)0);
    QS_SIG_DICTIONARY(PL_IS_RED_SIG, (void *)0);
    QS_SIG_DICTIONARY(BUTTON_SIG, (void *)0);
    QS_SIG_DICTIONARY(START_BLINK_SIG, (void *)0);
    QS_SIG_DICTIONARY(STOP_BLINK_SIG, (void *)0);
    QS_SIG_DICTIONARY(OFF_BLINK_SIG, (void *)0);
    QS_SIG_DICTIONARY(TIMEOUT_SIG, (void *)0);

    /* initialize publish-subscribe... */
    QF_psInit(subscrSto, Q_DIM(subscrSto));

    /* initialize event pools... */
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));

    aoPrio = 1u;
    QACTIVE_START(the_Ticker0, aoPrio++, 0, 0, 0, 0, 0);

    /* start the active objects... */
    for (n = 0U; n &lt; N_TL; ++n) {
        QACTIVE_START(AO_TLtraffic[n],           /* AO to start */
                      aoPrio++, /* QP priority of the AO */
                      trafficQueueSto[n],      /* event queue storage */
                      Q_DIM(trafficQueueSto[n]), /* queue length [events] */
                      (void *)0,             /* stack storage (not used) */
                      0U,                    /* size of the stack [bytes] */
                     (QEvt *)0);             /* initialization event */
    }
    QACTIVE_START(AO_TLpedestrian,                  /* AO to start */
                  aoPrio++, /* QP priority of the AO */
                  pedestrianQueueSto,             /* event queue storage */
                  Q_DIM(pedestrianQueueSto),      /* queue length [events] */
                  (void *)0,                 /* stack storage (not used) */
                  0U,                        /* size of the stack [bytes] */
                  (QEvt *)0);                /* initialization event */
    QACTIVE_START(AO_TLblinker,                  /* AO to start */
                  aoPrio++, /* QP priority of the AO */
                  blinkerQueueSto,             /* event queue storage */
                  Q_DIM(blinkerQueueSto),      /* queue length [events] */
                  (void *)0,                 /* stack storage (not used) */
                  0U,                        /* size of the stack [bytes] */
                  (QEvt *)0);                /* initialization event */

    return QF_run(); /* run the QF application */
}

/*****************************************************************************
* NOTE1:
* Windows is not a deterministic real-time system, which means that the
* system can occasionally and unexpectedly &quot;choke and freeze&quot; for a number
* of seconds. The designers of Windows have dealt with these sort of issues
* by massively oversizing the resources available to the applications. For
* example, the default Windows GUI message queues size is 10,000 entries,
* which can dynamically grow to an even larger number. Also the stacks of
* Win32 threads can dynamically grow to several megabytes.
*
* In contrast, the event queues, event pools, and stack size inside the
* real-time embedded (RTE) systems can be (and must be) much smaller,
* because you typically can put an upper bound on the real-time behavior
* and the resulting delays.
*
* To be able to run the unmodified applications designed originally for
* RTE systems on Windows, and to reduce the odds of resource shortages in
* this case, the generous WIN_FUDGE_FACTOR is used to oversize the
* event queues and event pools.
*/</text>
  </file>
  <file name="TLblinker.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;trafficlight.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

enum {
    ledOFF = 0,
    ledON
};

#define setLEDon()   TLblinker_setLed(me, ledON)
#define setLEDoff()  TLblinker_setLed(me, ledOFF)

/* Active object class -----------------------------------------------------*/
$declare(AOs::TLblinker)

/* Local objects -----------------------------------------------------------*/
static TLblinker l_blinker;   /* storage for PL */

/* Global objects ----------------------------------------------------------*/
QActive * const AO_TLblinker = &amp;l_blinker.super;   /* &quot;opaque&quot; pointer to PL AO */

/* PL definition --------------------------------------------------------*/
$define(AOs::TLblinker_ctor)
$define(AOs::TLblinker)</text>
  </file>
 </directory>
</model>
